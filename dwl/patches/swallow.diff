From e75ec49689daa5d7a0205f631afecdb19a6fb179 Mon Sep 17 00:00:00 2001
From: Palanix <palanixyt@gmail.com>
Date: Sun, 5 Jun 2022 17:52:12 +0200
Subject: [PATCH] Fix swallow patch

---
 config.def.h |  6 ++--
 dwl.c        | 98 ++++++++++++++++++++++++++++++++++++++++++++++++++--
 2 files changed, 98 insertions(+), 6 deletions(-)

diff --git a/config.def.h b/config.def.h
index 4f131dd..8db27a2 100644
--- a/config.def.h
+++ b/config.def.h
@@ -10,11 +10,11 @@ static const float focuscolor[]     = {1.0, 0.0, 0.0, 1.0};
 static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9" };
 
 static const Rule rules[] = {
-	/* app_id     title       tags mask     isfloating   monitor */
+	/* app_id     title       tags mask     isfloating  isterm          noswallow        monitor */
 	/* examples:
-	{ "Gimp",     NULL,       0,            1,           -1 },
+	{ "Gimp",     NULL,       0,            1,			0,				1,				-1 },
 	*/
-	{ "firefox",  NULL,       1 << 8,       0,           -1 },
+	{ "firefox",  NULL,       1 << 8,       0,          0,              1,              -1 },
 };
 
 /* layout(s) */
diff --git a/dwl.c b/dwl.c
index f061ebe..5510979 100644
--- a/dwl.c
+++ b/dwl.c
@@ -89,7 +89,8 @@ typedef struct {
 } Button;
 
 typedef struct Monitor Monitor;
-typedef struct {
+typedef struct Client Client;
+struct Client{
 	/* Must be first */
 	unsigned int type; /* XDGShell or X11* */
 	struct wlr_scene_node *scene;
@@ -116,10 +117,12 @@ typedef struct {
 #endif
 	int bw;
 	unsigned int tags;
-	int isfloating, isurgent;
+	int isfloating, isurgent, isterm, noswallow;
 	uint32_t resize; /* configure serial of a pending resize */
+	pid_t pid;
+	Client *swallowing, *swallowedby;
 	int isfullscreen;
-} Client;
+};
 
 typedef struct {
 	uint32_t singular_anchor;
@@ -198,6 +201,8 @@ typedef struct {
 	const char *title;
 	unsigned int tags;
 	int isfloating;
+	int isterm;
+	int noswallow;
 	int monitor;
 } Rule;
 
@@ -294,6 +299,10 @@ static Monitor *xytomon(double x, double y);
 static struct wlr_scene_node *xytonode(double x, double y, struct wlr_surface **psurface,
 		Client **pc, LayerSurface **pl, double *nx, double *ny);
 static void zoom(const Arg *arg);
+static pid_t getparentprocess(pid_t p);
+static int isdescprocess(pid_t p, pid_t c);
+static Client *termforwin(Client *w);
+static void swallow(Client *c, Client *w);
 
 /* variables */
 static const char broken[] = "broken";
@@ -468,6 +477,8 @@ applyrules(Client *c)
 		if ((!r->title || strstr(title, r->title))
 				&& (!r->id || strstr(appid, r->id))) {
 			c->isfloating = r->isfloating;
+			c->isterm     = r->isterm;
+			c->noswallow  = r->noswallow;
 			newtags |= r->tags;
 			i = 0;
 			wl_list_for_each(m, &mons, link)
@@ -966,6 +977,8 @@ createnotify(struct wl_listener *listener, void *data)
 	c->surface.xdg = xdg_surface;
 	c->bw = borderpx;
 
+	wl_client_get_credentials(c->surface.xdg->client->client, &c->pid, NULL, NULL);
+
 	LISTEN(&xdg_surface->surface->events.commit, &c->commit, commitnotify);
 	LISTEN(&xdg_surface->events.map, &c->map, mapnotify);
 	LISTEN(&xdg_surface->events.unmap, &c->unmap, unmapnotify);
@@ -1242,6 +1255,62 @@ fullscreennotify(struct wl_listener *listener, void *data)
 	setfullscreen(c, fullscreen);
 }
 
+pid_t
+getparentprocess(pid_t p)
+{
+        unsigned int v = 0;
+
+        FILE *f;
+        char buf[256];
+        snprintf(buf, sizeof(buf) - 1, "/proc/%u/stat", (unsigned)p);
+
+        if (!(f = fopen(buf, "r")))
+                return 0;
+
+        fscanf(f, "%*u %*s %*c %u", &v);
+        fclose(f);
+
+       return (pid_t)v;
+}
+
+int
+isdescprocess(pid_t p, pid_t c)
+{
+        while (p != c && c != 0)
+                c = getparentprocess(c);
+
+        return (int)c;
+}
+
+Client *
+termforwin(Client *w)
+{
+        Client *c;
+
+        if (!w->pid || w->isterm || w->noswallow)
+                return NULL;
+
+        wl_list_for_each(c, &clients, link)
+                        if (c->isterm && !c->swallowing && c->pid && isdescprocess(c->pid, w->pid))
+                                return c;
+
+        return NULL;
+}
+
+void
+swallow(Client *c, Client *w) {
+		c->bw = w->bw;
+		c->isfloating = w->isfloating;
+		c->isurgent = w->isurgent;
+		c->isfullscreen = w->isfullscreen;
+		resize(c, w->geom.x, w->geom.y, w->geom.width, w->geom.height, 0);
+		wl_list_insert(&w->link, &c->link);
+		wl_list_insert(&w->flink, &c->flink);
+		wlr_scene_node_set_enabled(w->scene, 0);
+		wlr_scene_node_set_enabled(c->scene, 1);
+
+}
+
 void
 incnmaster(const Arg *arg)
 {
@@ -1418,6 +1487,19 @@ mapnotify(struct wl_listener *listener, void *data)
 		setfullscreen(c, 1);
 
 	c->mon->un_map = 1;
+	if (!c->noswallow) {
+			Client *p = termforwin(c);
+			if (p) {
+					c->swallowedby = p;
+					p->swallowing  = c;
+					wl_list_remove(&c->link);
+					wl_list_remove(&c->flink);
+					swallow(c,p);
+					wl_list_remove(&p->link);
+					wl_list_remove(&p->flink);
+			}
+			arrange(c->mon);
+	}
 }
 
 void
@@ -2273,6 +2355,16 @@ unmapnotify(struct wl_listener *listener, void *data)
 		cursor_mode = CurNormal;
 		grabc = NULL;
 	}
+	if (c->swallowing) {
+			c->swallowing->swallowedby = NULL;
+			c->swallowing = NULL;
+	}
+
+	if (c->swallowedby) {
+			swallow(c->swallowedby, c);
+			c->swallowedby->swallowing = NULL;
+			c->swallowedby = NULL;
+	}
 
 	if (c->mon)
 		c->mon->un_map = 1;
-- 
2.36.1

